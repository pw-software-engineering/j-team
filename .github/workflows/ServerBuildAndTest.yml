name: BuildTestServer

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  registry: my_registry_name
  DB_HOST: localhost
  DB_USERNAME: test_user
  DB_PASSWORD: test

  ACR_URL: 'powoeuwacr.azurecr.io'
  NAMESPACE: 'j'                         # Name of your team {b, j, n}
  APP_NAME: 'server'                      # Name of your application {client, server, hotel}
  DEPLOYMENT_DIRECTORY: 'deployment'          # Path to directory where DEPLOYMENT_FILE_NAME is located
  DEPLOYMENT_FILE_NAME: 'server.yml'      # Name of deployment file for application in deployment location
  PATH_TO_DOCKER_FILE: 'Dockerfile' # Location of Dockerfile for app
  PATH_TO_APP_SRC: '.'          # Path to App sources

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
        working-directory: src/WebUI/
      - name: Build UnitTests proj
        run: dotnet build --no-restore
        working-directory: tests/Application.UnitTests/
      - name: UnitTests
        run: dotnet test  --verbosity Normal --no-build /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov
        working-directory: tests/Application.UnitTests/
      - name: Build IntegrationTests proj
        run: dotnet build --no-restore
        working-directory: tests/Application.IntegrationTests/
      - name: IntegrationTests
        run: dotnet test --verbosity Normal --no-build /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov
        working-directory: tests/Application.IntegrationTests/
      - name: Publish coverage report to coveralls.io
        uses: coverallsapp/github-action@master
        with:
         github-token: ${{ secrets.GITHUB_TOKEN }}
         path-to-lcov: tests/Application.IntegrationTests/TestResults/coverage.info

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set IMAGE_ID as env variable
        run: echo "IMAGE_ID=${{ env.ACR_URL }}/${{ env.APP_NAME }}:v${{ github.run_number }}" >> $GITHUB_ENV
      - name: Print IMAGE_ID
        run: echo "IMAGE_ID:${{ env.IMAGE_ID }}"
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ACR_URL }}
          username: ${{ secrets.ACR_USER_ID }}
          password: ${{ secrets.ACR_USER_PASSWORD }}
      - name: Build docker image
        run: docker build -f ${{ env.PATH_TO_DOCKER_FILE }} ${{ env.PATH_TO_APP_SRC }} -t ${{ env.IMAGE_ID }}
      - name: Push docker image
        run: docker push ${{ env.IMAGE_ID }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/setup-kubectl@v1
        with:
          version: 'v1.18.8'
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ secrets.AKS_NAME }}
          resource-group: ${{ secrets.AKS_RG_NAME }}
      - name: Set IMAGE_ID as env variable
        run: echo "IMAGE_ID=${{ env.ACR_URL }}/${{ env.APP_NAME }}:v${{ github.run_number }}" >> $GITHUB_ENV
      - name: Set DOMAIN env variable
        run: echo "DOMAIN=$(az aks show -g ${{ secrets.AKS_RG_NAME }} -n ${{ secrets.AKS_NAME }} --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)" >> $GITHUB_ENV
      - name: Print DOMAIN and IMAGE_ID
        run: |
          echo "${{ env.DOMAIN }}"
          echo "${{ env.IMAGE_ID }}"
      - name: Substitute environment variables in app deployment file
        run: envsubst < "${{ env.DEPLOYMENT_DIRECTORY }}/${{ env.DEPLOYMENT_FILE_NAME }}" > "${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME }}"
      - name: Deploy app to the cluster
        run: kubectl apply -f ${{ env.DEPLOYMENT_DIRECTORY }}/out-${{ env.DEPLOYMENT_FILE_NAME }} --wait